/* Styles used only for the game page */

$grid-cell-size: 40px;
$grid-width: 7;
$grid-height: 6;

$grid-gradient: radial-gradient(50% 50% , transparent 75%, yellow 80%);

$red-gradient: radial-gradient(50% 50% , red 75%, transparent 80%);
$red-hover-gradient: radial-gradient(50% 50% , rgba(255, 0, 0, 0.25) 75%, transparent 80%);

$black-gradient: radial-gradient(50% 50% , black 75%, transparent 80%);
$black-hover-gradient: radial-gradient(50% 50% , rgba(0, 0, 0, 0.25) 75%, transparent 80%);

.game .content .wrapper {
	display: flex;
	align-items: center;
	justify-content: center;

	button {
		margin: 16px auto;
		width:49%;

		background-color: white;

		&:hover {
			background-color: darken(white, 3%);
		}

		&:active {
			background-color: darken(white, 8%);
		}
	}
	.account {
		text-align: left;
	}

	> div {
		display: none;

		&.loaded {
			display: block;
		}
	}
}

#connect-four {
	margin-top: 32px;
	perspective: 1000;

	table {
		border-collapse: collapse;
	}

	td {
		width: $grid-cell-size;
		height: $grid-cell-size;
		position: relative;
		padding: 0;
		margin: 0;
	}

	&:not(.emptying) td {
		cursor: pointer;
	}

	/* Show :before and :after on top of each other */
	td:before, td:after {
		content: '';
		top: 0;
		left: 0;
		position: absolute;
		width: 100%;
		height: 100%;
	}

	/* Use :before to style the actual circle */
	td:before {
		z-index: 1;
	}

	/* use :after to show the yellow grid */
	td:after {
		background-image: $grid-gradient;
		z-index: 2;
	}

	/* round the corner pieces */
	tr:first-child td:first-child:after {
		border-top-left-radius: 10px;
	}

	tr:first-child td:last-child:after {
		border-top-right-radius: 10px;
	}

	tr:last-child td:first-child:after {
		border-bottom-left-radius: 10px;
	}

	tr:last-child td:last-child:after {
		border-bottom-right-radius: 10px;
	}

	/* Change the color depending on which player owns the spot */
	td[data-player="red"]:before {
		background-image: $red-gradient;
	}

	td[data-player="black"]:before {
		background-image: $black-gradient;
	}

	@for $i from 1 through $grid-height {
		tr:nth-child(#{$i}) td[data-player]:before {
		    animation: drop-in-#{$i} 0.5s;
		}
	}

	&.emptying {
		table {
			animation: flip 2s;
		}

		td[data-player]:before {
			animation: dump 4s !important;
		}
	}

	&.won {
		td:not(.winning-cell)[data-player="red"]:before {
			background-image: $red-hover-gradient;
		}

		td:not(.winning-cell)[data-player="black"]:before {
			background-image: $black-hover-gradient;
		}
	}

	&:not(.emptying):not(.won) {
		&[data-turn="red"] td.next:before {
			background-image: $red-hover-gradient;
		}

		&[data-turn="black"] td.next:before {
			background-image: $black-hover-gradient;
		}

		@for $i from 1 through $grid-height {
			tr:nth-child(#{$i}) td.next:before {
				transform: translateY(#{$i * $grid-cell-size * -1});
			}
		}
	}
}

@for $i from 1 through $grid-height {
	@keyframes drop-in-#{$i} {
		0% {
			transform: translateY(#{$i * $grid-cell-size * -1});
		}

		50% {
			transform: translateY(2px);
		}

		75% {
			transform: translateY(-3px);
		}
	}
}

@keyframes flip {
	40% {
		transform: rotateX(180deg);
	}

	60% {
		transform: rotateX(180deg);
	}
}

@keyframes dump {
	12.5% {
		transform: translateY(0);
	}

	40% {
		transform: translateY(-1000px);
	}
}
